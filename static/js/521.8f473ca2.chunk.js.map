{"version":3,"file":"static/js/521.8f473ca2.chunk.js","mappings":"iOACaA,EAASC,EAAAA,EAAAA,EAAH,wF,SCENC,EAAY,WACvB,OACE,SAACF,EAAD,4DAIH,ECPYG,EAAOF,EAAAA,EAAAA,GAAH,mFAQJG,GAFOH,EAAAA,EAAAA,GAAH,sBAEKA,EAAAA,EAAAA,EAAH,yFAMNI,EAAOJ,EAAAA,EAAAA,EAAH,mFCVJK,EAAU,WACrB,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,IAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBH,GAASI,KAAKL,EAC/B,GAAE,CAACC,IAECF,EAIL,OACE,UAACL,EAAD,WACsB,IAAnBK,EAAQO,SAAgB,SAACb,EAAD,IAExBM,EAAQQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,OAAhB,OACX,2BACE,SAACf,EAAD,UAASe,KACT,SAACd,EAAD,UAAOa,MAFAD,EADE,MAQlB,C","sources":["components/Error/NoReviews.styled.jsx","components/Error/NoReviews.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nexport const RevErr = styled.p`\n  margin-bottom: 8px;\n  font-size: 22px;\n  color: orangered;\n`;","import {RevErr} from './NoReviews.styled'\n\n\nexport const NoReviews = () => {\n  return (\n    <RevErr>\n      Sorry, we don't have any reviews on this movie\n    </RevErr>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n`;\n\nexport const Item = styled.li``;\n\nexport const Author = styled.p`\n  margin-bottom: 8px;\n  font-size: 22px;\n  color: orangered;\n`;\n\nexport const Text = styled.p`\n  font-size: 16px;\n  color: white;\n  line-height: 1.68;\n`;\n","import { getMovieReviews } from 'services/fetchMovies';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { NoReviews } from 'components/Error/NoReviews';\nimport { List, Author, Text } from './Reviews.styled';\n\nexport const Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieReviews(movieId).then(setReviews);\n  }, [movieId]);\n\n  if (!reviews) {\n    return;\n  }\n\n  return (\n    <List>\n      {reviews.length === 0 && <NoReviews />}\n\n      {reviews.map(({ id, content, author }) => (\n        <li key={id}>\n          <Author>{author}</Author>\n          <Text>{content}</Text>\n        </li>\n      ))}\n    </List>\n  );\n};\n"],"names":["RevErr","styled","NoReviews","List","Author","Text","Reviews","useState","reviews","setReviews","movieId","useParams","useEffect","getMovieReviews","then","length","map","id","content","author"],"sourceRoot":""}